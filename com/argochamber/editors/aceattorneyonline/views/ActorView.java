/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.argochamber.editors.aceattorneyonline.views;

import com.argochamber.editors.aceattorneyonline.game.Actor;
import com.argochamber.editors.aceattorneyonline.game.Evidence;
import com.argochamber.editors.aceattorneyonline.game.Scene;
import com.argochamber.editors.aceattorneyonline.service.Controller;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

/**
 *
 * @author Pablo
 */
public class ActorView extends javax.swing.JPanel {
    
    
    private final Controller controller;
    private final Actor actor;
    private final Scene scene;

    /**
     * 
     * @param actor
     * @param scene
     * @param controller 
     */
    public ActorView(Actor actor, Scene scene, Controller controller){
        initComponents();
        this.charName.setText(actor.getName());
        this.charDesc.setText(actor.getDesc());
        this.controller = controller;
        this.actor = actor;
        this.scene = scene;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jCheckBox1 = new javax.swing.JCheckBox();
        removeActor = new javax.swing.JButton();
        charName = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        charDesc = new javax.swing.JTextArea();
        editEvList = new javax.swing.JButton();
        editChar = new javax.swing.JButton();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList1);

        jCheckBox1.setText("jCheckBox1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(152, 152, 152)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(138, 138, 138)
                .addComponent(jCheckBox1)
                .addContainerGap(207, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addComponent(jCheckBox1)))
                .addContainerGap(261, Short.MAX_VALUE))
        );

        setBackground(new java.awt.Color(204, 204, 204));
        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setMaximumSize(new java.awt.Dimension(2000, 194));
        setMinimumSize(new java.awt.Dimension(400, 194));

        removeActor.setText("Remove Character");
        removeActor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                removeActorMouseReleased(evt);
            }
        });
        removeActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActorActionPerformed(evt);
            }
        });

        charName.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        charName.setText("$CHAR_NAME");

        charDesc.setEditable(false);
        charDesc.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.background"));
        charDesc.setColumns(20);
        charDesc.setLineWrap(true);
        charDesc.setRows(5);
        jScrollPane1.setViewportView(charDesc);

        editEvList.setText("Edit Evidences");
        editEvList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                editEvListMouseReleased(evt);
            }
        });

        editChar.setText("Edit Character");
        editChar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                editCharMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(charName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                        .addComponent(removeActor, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(editChar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(editEvList)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(charName)
                    .addComponent(removeActor, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editEvList)
                    .addComponent(editChar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void removeActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeActorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_removeActorActionPerformed

    private void removeActorMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeActorMouseReleased
        // Handle the actor removal request.
        this.controller.deleteActor(this.actor, this.scene);
    }//GEN-LAST:event_removeActorMouseReleased

    private void editEvListMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editEvListMouseReleased
        // We need to edit evidences!
        
        
        //Name header
        JLabel jname = new JLabel("Character: "+this.actor.getName());
        jname.setFont(new java.awt.Font("Tahoma", 1, 24));
        
        
        List<JComponent> in = new ArrayList<>(Arrays.asList(new JComponent[] {
		jname,
		new JLabel("Evidences:")}));
        
        Map<String, JCheckBox> evil = this.scene.getEvidences().stream()
                .map(Evidence::getName)
                .map(str -> new JCheckBox(str))
                .collect(Collectors.toMap(JCheckBox::getText, val -> val));
        
        
        
        this.actor.getEvidenceIds().stream()
                .map(evid -> this.scene.getEvidences().get(evid-1))
                .map(Evidence::getName)
                .forEach(str -> evil.get(str).setSelected(true));
        
        in.addAll( evil.values().stream().map(cbox -> (JComponent)cbox).collect(Collectors.toList()) );
        
        final JComponent[] inputs = new JComponent[in.size()];
        in.toArray(inputs);
        
        //Show the dialog
        JOptionPane.showMessageDialog(null, inputs, "Edit character's evidences", JOptionPane.PLAIN_MESSAGE);
        
        this.actor.setEvidenceIds(evil.values().stream()
                .filter((JCheckBox cbox) -> cbox.isSelected())
                .map(JCheckBox::getText)
                .map((String str) -> 
                        this.scene.getEvidences().lastIndexOf(
                            this.scene.getEvidences().stream()
                                    .filter(ev -> ev.getName().equalsIgnoreCase(str))
                                    .findFirst().get()
                        )+1
                ).collect(Collectors.toList())
        );
        System.out.println("Evlist: "+this.actor.getEvidenceIds()+"\n\n");
    }//GEN-LAST:event_editEvListMouseReleased

    private void editCharMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editCharMouseReleased
        //Now, create a pop-up to get the new character data.
        JTextArea actorDesc = new JTextArea();
        JComboBox actorName = new JComboBox();
        //Fill out with data:
        this.controller.getActorList().stream().map(File::getName).forEach(str -> actorName.addItem(str));
        actorDesc.setText(this.getActorDesc());
        actorName.setSelectedItem(this.charName.getText());
        
        //The Build up the panel
        final JComponent[] inputs = new JComponent[] {
		new JLabel("Name"),
		actorName,
		new JLabel("Description"),
		actorDesc
        };
        JOptionPane.showMessageDialog(null, inputs, "Edit character", JOptionPane.PLAIN_MESSAGE);
        
        //Update the data
        this.charDesc.setText(actorDesc.getText());
        this.charName.setText((String)actorName.getSelectedItem());
        this.actor.setDesc(actorDesc.getText());
        this.actor.setName((String)actorName.getSelectedItem());
        
    }//GEN-LAST:event_editCharMouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea charDesc;
    private javax.swing.JLabel charName;
    private javax.swing.JButton editChar;
    private javax.swing.JButton editEvList;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton removeActor;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Gets the actor's name.
     * @return 
     */
    public String getActorName() {
        return this.charName.getText();
    }
    
    /**
     * Gets the actor's desc.
     * @return 
     */
    public String getActorDesc() {
        return this.charDesc.getText();
    }
    
    /**
     * Casts itself to actor.
     * @return 
     */
    public Actor asActor(){
        Actor act = new Actor();
        act.setName(this.getActorName());
        act.setDesc(this.getActorDesc());
        return act;
    }
}
